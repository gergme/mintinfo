#!/usr/bin/env bash

# Variables
VOCAL=1 # 0 (false) or 1 (true)
# If you set vocal to 0, you need output, so we set debug mode to 1 (true)
if [ "${VOCAL}" == "0" ]; then DEBUG=1
else
# Keep this here so if vocal is disabled you get some output!
DEBUG=0 # 0 (false) or 1 (true)
fi
SENSOR_MONITOR="temp1"
SENSOR_MAX="110"
LOAD_MAX=5
ALERT=0
ALERT_SOUND="/usr/share/sounds/purple/alert.wav"
SENSOR_ALERT=0

# Functions
playsound(){
	if [ "$ALERT" != 0 ]; then
	aplay -q "$@"
		if [ "$DEBUG" != 0 ]; then
			printf "DEBUG:  Aplay location            | `which aplay`\n"
			printf "DEBUG:  Sound location            | ${@}\n"
			printf "DEBUG:  Sound exists              | "
				if [ -f "${@}" ]; then printf "TRUE\n" else printf "FALSE\n"; fi
			printf "DEBUG:  Vocal                     | "
				if [ "$VOCAL" == "1" ]; then printf "ENABLED\n"; else printf "DISABLED\n"; fi
			printf "=======================================================================\n"
		fi
	fi
}

say(){
	simple_google_tts en "$@"
}

systemp(){
	# Grab the sensor temperature
	SENSOR_TEMP=`sensors -f | grep ${SENSOR_MONITOR} | head -n1 | cut -d "+" -f2 | cut -d "." -f1`

	# Test if the temperature goes over threshold
		if [ "${SENSOR_TEMP}" -ge "${SENSOR_MAX}" ]; then SENSOR_ALERT=1; else SENSOR_ALERT=0; fi
	
		if [ "$DEBUG" != 0 ]; then
			printf "DEBUG:  Sensor temperature        | ${SENSOR_TEMP}Â°F\n"
			printf "DEBUG:  Sensor threshold          | ${SENSOR_ALERT}\n"
			printf "=======================================================================\n"
		fi

		if [ "$VOCAL" != 0 ]; then
			if [ "${SENSOR_TEMP}" -ge "${SENSOR_MAX}" ]; then SENSOR_THRESHOLD=".. this is above your threshold of ${SENSOR_MAX}"; fi
			say "Your defined temperature sensor is reading at ${SENSOR_TEMP} degrees fahrenheit ${SENSOR_THRESHOLD}" &> /dev/null
		fi
}

sysload(){
	NO_CPUS=`grep processor /proc/cpuinfo | wc -l`
	CPU_LOAD_1MIN=`cat /proc/loadavg | cut -d " " -f1`
	CPU_LOAD_5MIN=`cat /proc/loadavg | cut -d " " -f2`
	CPU_LOAD_15MIN=`cat /proc/loadavg | cut -d " " -f3`
	SYSTEM_LOAD_PERCENT=`echo "scale=2; ${CPU_LOAD_1MIN}/${NO_CPUS}*100" | bc`
		if [ "$DEBUG" != 0 ]; then
			printf "DEBUG:  Number of CPUs            | ${NO_CPUS}\n"
			printf "DEBUG:  CPU LoadAvg 1 minute      | ${CPU_LOAD_1MIN}\n"
			printf "DEBUG:  CPU LoadAvg 5 minute      | ${CPU_LOAD_5MIN}\n"
			printf "DEBUG:  CPU LoadAvg 15 minute     | ${CPU_LOAD_15MIN}\n"
			printf "DEBUG:  System LoadAvg Percentage | ${SYSTEM_LOAD_PERCENT}%%\n"
			printf "=======================================================================\n"
		fi
		if [ "$VOCAL" != 0 ]; then
			SYSTEM_LOAD_PERCENT=`echo ${SYSTEM_LOAD_PERCENT} | cut -d "." -f1`
			if [ "${SYSTEM_LOAD_PERCENT}" -ge "${LOAD_MAX}" ]; then LOAD_THRESHOLD=".. this is at or above your threshold of ${LOAD_MAX}"; fi
			say "I see you have ${NO_CPUS} cores, current system load is at ${SYSTEM_LOAD_PERCENT} percent of capacity ${LOAD_THRESHOLD}" &> /dev/null
		fi
}

sysmem(){
	TOTAL_MEMORY=`free -h | grep "Mem:" | awk '{print $2}'`
	INUSE_MEMORY=`free -h | grep "Mem:" | awk '{print $3}'`
	FREE_MEMORY=`free -h | grep "Mem:" | awk '{print $4}'`
	FREE_SWAP=`free -h | grep "Swap:" | awk '{print $3}'`
	MEMORY_FREE_PERCENT=`free | grep Mem | awk '{print $3/$2 * 100.0}'`
		if [ "$DEBUG" != 0 ]; then
			printf "DEBUG:  Total memory              | ${TOTAL_MEMORY}\n"
			printf "DEBUG:  Free memory               | ${FREE_MEMORY}\n"
			printf "DEBUG:  In-use memory             | ${INUSE_MEMORY}\n"
			printf "DEBUG:  In-use memory percentage  | ${MEMORY_FREE_PERCENT}%%\n"
			printf "=======================================================================\n"
		fi
		if [ "$VOCAL" != 0 ]; then
			MEMORY_FREE_PERCENT=`echo ${MEMORY_FREE_PERCENT} | cut -d "." -f1`
			if [ "$FREE_SWAP" == "0B" ]; then FREE_SWAP="none"; fi
			say "Your system has ${TOTAL_MEMORY} of memory, your usage percentage is currently at ${MEMORY_FREE_PERCENT} percent, ${FREE_SWAP} of swap is active" &> /dev/null
		fi
}

sysspeedtest(){
	SPEEDTEST=`speedtest-cli --simple > /tmp/stcli.tmp`
	SPEEDTEST_PING=`cat /tmp/stcli.tmp | grep Ping: | cut -d ":" -f2`
	SPEEDTEST_DL=`cat /tmp/stcli.tmp | grep Download: | cut -d ":" -f2`
	SPEEDTEST_UL=`cat /tmp/stcli.tmp | grep Upload: | cut -d ":" -f2`	
		if [ "$DEBUG" != 0 ]; then
			printf "DEBUG:  Ping                      | ${SPEEDTEST_PING}\n"
			printf "DEBUG:  Download                  | ${SPEEDTEST_DL}\n"
			printf "DEBUG:  Upload                    | ${SPEEDTEST_UL}\n"
			printf "=======================================================================\n"
		fi
		if [ "$VOCAL" != 0 ]; then
			say "Your internet ping is averaging ${SPEEDTEST_PING}, your download speed is at ${SPEEDTEST_DL} with an upload speed of ${SPEEDTEST_UL}" &> /dev/null
		fi
	rm -f /tmp/stcli.tmp
}

version(){
printf "sinfo v1.0.5\n"
printf "Greg Holthaus\n"
}

while test $# -gt 0; do
		case "$1" in
			-h|--help)
					version
					echo "options:"
					echo -e "--no-speak\t Disable speaking (enables DEBUG)"
					echo -e "--debug\t\tEnable debug information (must be first switch)"
					echo -e "-h, --help\tIts what youre looking at!"
					echo -e "-t, --temp\tQuery system temperature"
					echo -e "-l, --load\tQuery system load"
					echo -e "-m, --mem\tQuery system memory"
					echo -e "-s, --speed\tQuery system internet (WAN) speed"
					exit 0
					;;
			--no-speak)
					VOCAL=0
					DEBUG=1
					printf "=======================================================================\n"
                                        shift
                                        ;;
			--debug)
					DEBUG=1
					printf "=======================================================================\n"
					shift
					;;
			-t|--temp)
					playsound ${ALERT_SOUND}
					systemp
					shift
					;;
			-l|--load)
					playsound ${ALERT_SOUND}
					sysload
					shift
					;;
			-m|--mem)
					playsound ${ALERT_SOUND}
					sysmem
					shift
					;;						
			-s|--speed)
					printf "Testing internet speed...please wait\n"
					playsound ${ALERT_SOUND}
					sysspeedtest
					shift
					;;
			*)
					printf "I dont know what you want.\n"
					break
					;;
					esac
done
exit 0
